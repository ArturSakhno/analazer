name: Run Python Script on Pull Request

# Trigger the workflow on pull requests
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository to the runner
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.4' # Specify the Python version you need

      # Install dependencies if needed
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Run Python script and capture the output
      - name: Run script
        id: run_script
        run: |
          output=$(python script.py)
          echo "Raw script output: $output"  # Debugging line to print the raw output
          echo "script_output<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Debug step to print environment variable
      - name: Print environment variable
        run: echo "script_output=$script_output"
        env:
          script_output: ${{ steps.run_script.outputs.script_output }}

      # Add a comment to the pull request with the output if different
      - name: Comment on PR if different
        uses: actions/github-script@v6
        with:
          script: |
            const scriptOutput = process.env.script_output;
            console.log(`script_output: ${scriptOutput}`);
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });

            const outputComment = `Output of the script:\n\`\`\`\n${scriptOutput}\n\`\`\``;
            const commentExists = comments.some(comment => comment.body === outputComment);

            if (!commentExists) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: outputComment,
              });
            }
        env:
          script_output: ${{ steps.run_script.outputs.script_output }}
